






TITLE













AUTHOR Anuraag Veturi
Version 1


Movement Class Reference

Public Member Functions
Movement (GameObject entity)
Initializes a new instance of the Movement class. 
Movement (GameObject entity, string data)
Initializes a new instance of the Movement class from a data string. 
void ShiftMovementByPoint (Vector3 shift)
Shifts the movement by point shift. 
void SetPrimitiveDelta (int idx, float delta)
Sets the delta tuning value for the primitive at the specified index. 
void SaveMovementToFile (string filename)
Saves the movement to file. 
void PostMovement (string url, string movementName)
POSTs the movement to the specified URL. 
string GetPrimitiveAsString (int index)
Gets the primitive state. 
void ChainLine (Vector3 end, float dur)
Chains a LINE primitive to the current movement 
void ChainWait (float dur)
Chains a WAIT primitive to the current movement 
void ChainSin (Vector3 end, float dur, float amplitude, float freq, float phase=0)
Chains a SIN primitive to the current movement 
void ChainCurve (Vector3 end, float dur, Vector3 dep=default(Vector3))
Chains a CURVE primitive to the current movement 
void ChainCounterClockwiseCircle (Vector3 center, float radians, float duration)
Chains a counter clock wise CIRCLE primitive to the current movement 
void ChainClockwiseCircle (Vector3 center, float radians, float duration)
Chains a clock wise CIRCLE primitive to the current movement 
void AddLine (Vector3 start, Vector3 end, float dur)
Adds a LINE primitive to the current movement. 
void AddSin (Vector3 start, Vector3 end, float dur, float amplitude, float freq, float phase=0)
Adds a SIN primitive to the current movement. 
void AddCurve (Vector3 start, Vector3 end, float dur, Vector3 dep=default(Vector3))
Adds a CURVE primitive to the current movement. 
void AddWait (float waitTime, Vector3 waitPoint=default(Vector3))
Adds a WAIT primitive to the current movement. 
void AddCounterClockwiseCircle (Vector3 start, Vector3 center, float radians, float duration)
Adds a counter clock wise CIRCLE primitive to the current movement. 
void AddClockwiseCircle (Vector3 start, Vector3 center, float radians, float duration)
Adds a clock wise CIRCLE primitive to the current movement. 
void Start ()
Start this instance. Begins the movement timers. Movement.Update() needs to be called for motion to actually occur. 
void SetRepeat (int num=0)
Sets the number of repetitions of this movement. If left empty, the movement repeats infinitely. 
void ToggleTrail ()
Toggles the trail left behind by the gameObject that the movement is attached to. 
void setMarker (GameObject m)
Sets the marker that will be left behind if trail is turned on. 
void Update ()
Update this instance movement. Must be called from Monobehaviour::Update() 
Static Public Member Functions
static Movement InitMovementFromFile (GameObject entity, string filename)
Inits the movement from file. The file must have been created by this class. 
static Movement InitMovementFromUrl (GameObject entity, string url)
GETs the movement state from a URL. The state must have been stored by this class. 
Properties
object this[int i] [get]
Gets the Movement at the specified index. 

Constructor & Destructor Documentation
Movement.Movement (GameObject entity)[inline]

Initializes a new instance of the Movement class. 

Parameters:
entity 
Entity.
Movement.Movement (GameObject entity, string data)[inline]

Initializes a new instance of the Movement class from a data string. 

Parameters:
entity 
Entity.
data 
Data.

Member Function Documentation
void Movement.AddClockwiseCircle (Vector3 start, Vector3 center, float radians, float duration)[inline]

Adds a clock wise CIRCLE primitive to the current movement. 

Parameters:
start 
Start.
center 
Center.
radians 
Radians.
duration 
Duration.
void Movement.AddCounterClockwiseCircle (Vector3 start, Vector3 center, float radians, float duration)[inline]

Adds a counter clock wise CIRCLE primitive to the current movement. 

Parameters:
start 
Start.
center 
Center.
radians 
Radians.
duration 
Duration.
void Movement.AddCurve (Vector3 start, Vector3 end, float dur, Vector3 dep = default(Vector3))[inline]

Adds a CURVE primitive to the current movement. 

Parameters:
start 
Start.
end 
End.
dur 
Dur.
dep 
Dep.
void Movement.AddLine (Vector3 start, Vector3 end, float dur)[inline]

Adds a LINE primitive to the current movement. 

Parameters:
start 
Start.
end 
End.
dur 
Dur.
void Movement.AddSin (Vector3 start, Vector3 end, float dur, float amplitude, float freq, float phase = 0)[inline]

Adds a SIN primitive to the current movement. 

Parameters:
start 
Start.
end 
End.
dur 
Dur.
amplitude 
Amplitude.
freq 
Freq.
phase 
Phase.
void Movement.AddWait (float waitTime, Vector3 waitPoint = default(Vector3))[inline]

Adds a WAIT primitive to the current movement. 

Parameters:
waitTime 
Wait time.
waitPoint 
Wait point.
void Movement.ChainClockwiseCircle (Vector3 center, float radians, float duration)[inline]

Chains a clock wise CIRCLE primitive to the current movement 

Parameters:
center 
Center.
radians 
Radians.
duration 
Duration.
void Movement.ChainCounterClockwiseCircle (Vector3 center, float radians, float duration)[inline]

Chains a counter clock wise CIRCLE primitive to the current movement 

Parameters:
center 
Center.
radians 
Radians.
duration 
Duration.
void Movement.ChainCurve (Vector3 end, float dur, Vector3 dep = default(Vector3))[inline]

Chains a CURVE primitive to the current movement 

Parameters:
end 
End.
dur 
Dur.
dep 
Dep.
void Movement.ChainLine (Vector3 end, float dur)[inline]

Chains a LINE primitive to the current movement 

Parameters:
end 
End.
dur 
Dur.
void Movement.ChainSin (Vector3 end, float dur, float amplitude, float freq, float phase = 0)[inline]

Chains a SIN primitive to the current movement 

Parameters:
end 
End.
dur 
Dur.
amplitude 
Amplitude.
freq 
Freq.
phase 
Phase.
void Movement.ChainWait (float dur)[inline]

Chains a WAIT primitive to the current movement 

Parameters:
dur 
Dur.
string Movement.GetPrimitiveAsString (int index)[inline]

Gets the primitive state. 

Returns:
The primitive as string.
Parameters:
index 
Index.
static Movement Movement.InitMovementFromFile (GameObject entity, string filename)[inline], [static]

Inits the movement from file. The file must have been created by this class. 

Returns:
The movement from file.
Parameters:
entity 
Entity.
filename 
Filename.
static Movement Movement.InitMovementFromUrl (GameObject entity, string url)[inline], [static]

GETs the movement state from a URL. The state must have been stored by this class. 

Returns:
The movement from URL.
Parameters:
entity 
Entity.
url 
URL.
void Movement.PostMovement (string url, string movementName)[inline]

POSTs the movement to the specified URL. 

Parameters:
url 
URL.
movementName 
Movement name.
void Movement.SaveMovementToFile (string filename)[inline]

Saves the movement to file. 

Parameters:
filename 
Filename.
void Movement.setMarker (GameObject m)[inline]

Sets the marker that will be left behind if trail is turned on. 

Parameters:
m 
M.
void Movement.SetPrimitiveDelta (int idx, float delta)[inline]

Sets the delta tuning value for the primitive at the specified index. 

Parameters:
idx 
Index.
delta 
Delta.
void Movement.SetRepeat (int num = 0)[inline]

Sets the number of repetitions of this movement. If left empty, the movement repeats infinitely. 

Parameters:
num 
Number.
void Movement.ShiftMovementByPoint (Vector3 shift)[inline]

Shifts the movement by point shift. 

Parameters:
shift 
Shift.
void Movement.Start ()[inline]

Start this instance. Begins the movement timers. Movement.Update() needs to be called for motion to actually occur. 

void Movement.ToggleTrail ()[inline]

Toggles the trail left behind by the gameObject that the movement is attached to. 

void Movement.Update ()[inline]

Update this instance movement. Must be called from Monobehaviour::Update() 


Property Documentation
object Movement.this[int i][get]

Gets the Movement at the specified index. 

Parameters:
i 
The index.

The documentation for this class was generated from the following file:
Movement.cs
Index
INDEX